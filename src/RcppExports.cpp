// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// BW_step
List BW_step(NumericVector data, int n_levels, NumericMatrix probabilities, NumericMatrix P_trans_init);
RcppExport SEXP _VND_BW_step(SEXP dataSEXP, SEXP n_levelsSEXP, SEXP probabilitiesSEXP, SEXP P_trans_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_levels(n_levelsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type probabilities(probabilitiesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P_trans_init(P_trans_initSEXP);
    rcpp_result_gen = Rcpp::wrap(BW_step(data, n_levels, probabilities, P_trans_init));
    return rcpp_result_gen;
END_RCPP
}
// Log_Likelihood
List Log_Likelihood(NumericVector data, NumericVector init, NumericMatrix probabilities, NumericMatrix P_trans);
RcppExport SEXP _VND_Log_Likelihood(SEXP dataSEXP, SEXP initSEXP, SEXP probabilitiesSEXP, SEXP P_transSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type probabilities(probabilitiesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P_trans(P_transSEXP);
    rcpp_result_gen = Rcpp::wrap(Log_Likelihood(data, init, probabilities, P_trans));
    return rcpp_result_gen;
END_RCPP
}
// Viterbi_simple
arma::vec Viterbi_simple(NumericVector y, int K, NumericVector pi, arma::mat P_trans, NumericVector mu, NumericVector var);
RcppExport SEXP _VND_Viterbi_simple(SEXP ySEXP, SEXP KSEXP, SEXP piSEXP, SEXP P_transSEXP, SEXP muSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi(piSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P_trans(P_transSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var(varSEXP);
    rcpp_result_gen = Rcpp::wrap(Viterbi_simple(y, K, pi, P_trans, mu, var));
    return rcpp_result_gen;
END_RCPP
}
// ck_model
NumericVector ck_model(NumericVector p, int l);
RcppExport SEXP _VND_ck_model(SEXP pSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(ck_model(p, l));
    return rcpp_result_gen;
END_RCPP
}
// mydnorm
NumericVector mydnorm(NumericVector x, NumericVector means, NumericVector sds);
RcppExport SEXP _VND_mydnorm(SEXP xSEXP, SEXP meansSEXP, SEXP sdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type means(meansSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sds(sdsSEXP);
    rcpp_result_gen = Rcpp::wrap(mydnorm(x, means, sds));
    return rcpp_result_gen;
END_RCPP
}
// density_pois
arma::vec density_pois(int x, NumericVector lambda);
RcppExport SEXP _VND_density_pois(SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(density_pois(x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// mydnorm2
arma::mat mydnorm2(arma::mat x, arma::mat means, arma::mat sds);
RcppExport SEXP _VND_mydnorm2(SEXP xSEXP, SEXP meansSEXP, SEXP sdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type means(meansSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sds(sdsSEXP);
    rcpp_result_gen = Rcpp::wrap(mydnorm2(x, means, sds));
    return rcpp_result_gen;
END_RCPP
}
// mydnorm3
arma::vec mydnorm3(NumericVector x, NumericVector means, NumericVector sds);
RcppExport SEXP _VND_mydnorm3(SEXP xSEXP, SEXP meansSEXP, SEXP sdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type means(meansSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sds(sdsSEXP);
    rcpp_result_gen = Rcpp::wrap(mydnorm3(x, means, sds));
    return rcpp_result_gen;
END_RCPP
}
// mydnorm4
arma::vec mydnorm4(arma::vec x, arma::vec means, arma::vec sds);
RcppExport SEXP _VND_mydnorm4(SEXP xSEXP, SEXP meansSEXP, SEXP sdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type means(meansSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sds(sdsSEXP);
    rcpp_result_gen = Rcpp::wrap(mydnorm4(x, means, sds));
    return rcpp_result_gen;
END_RCPP
}
// mydnorm5
arma::mat mydnorm5(double x, arma::vec means, arma::vec sds, int K, int r, arma::vec beta);
RcppExport SEXP _VND_mydnorm5(SEXP xSEXP, SEXP meansSEXP, SEXP sdsSEXP, SEXP KSEXP, SEXP rSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type means(meansSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mydnorm5(x, means, sds, K, r, beta));
    return rcpp_result_gen;
END_RCPP
}
// mydnorm6
arma::mat mydnorm6(double x, arma::vec means, arma::vec sds, int K);
RcppExport SEXP _VND_mydnorm6(SEXP xSEXP, SEXP meansSEXP, SEXP sdsSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type means(meansSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(mydnorm6(x, means, sds, K));
    return rcpp_result_gen;
END_RCPP
}
// mydnorm7
arma::vec mydnorm7(double x, arma::vec means, arma::vec sds, arma::vec beta);
RcppExport SEXP _VND_mydnorm7(SEXP xSEXP, SEXP meansSEXP, SEXP sdsSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type means(meansSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sds(sdsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(mydnorm7(x, means, sds, beta));
    return rcpp_result_gen;
END_RCPP
}
// simulate_MC
NumericVector simulate_MC(int n_data, NumericMatrix P_trans, NumericVector initial);
RcppExport SEXP _VND_simulate_MC(SEXP n_dataSEXP, SEXP P_transSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_data(n_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type P_trans(P_transSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initial(initialSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_MC(n_data, P_trans, initial));
    return rcpp_result_gen;
END_RCPP
}
// uc_model
NumericVector uc_model(NumericVector p, int l);
RcppExport SEXP _VND_uc_model(SEXP pSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(uc_model(p, l));
    return rcpp_result_gen;
END_RCPP
}
// vnd_model
NumericVector vnd_model(NumericVector parameters);
RcppExport SEXP _VND_vnd_model(SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(vnd_model(parameters));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_VND_BW_step", (DL_FUNC) &_VND_BW_step, 4},
    {"_VND_Log_Likelihood", (DL_FUNC) &_VND_Log_Likelihood, 4},
    {"_VND_Viterbi_simple", (DL_FUNC) &_VND_Viterbi_simple, 6},
    {"_VND_ck_model", (DL_FUNC) &_VND_ck_model, 2},
    {"_VND_mydnorm", (DL_FUNC) &_VND_mydnorm, 3},
    {"_VND_density_pois", (DL_FUNC) &_VND_density_pois, 2},
    {"_VND_mydnorm2", (DL_FUNC) &_VND_mydnorm2, 3},
    {"_VND_mydnorm3", (DL_FUNC) &_VND_mydnorm3, 3},
    {"_VND_mydnorm4", (DL_FUNC) &_VND_mydnorm4, 3},
    {"_VND_mydnorm5", (DL_FUNC) &_VND_mydnorm5, 6},
    {"_VND_mydnorm6", (DL_FUNC) &_VND_mydnorm6, 4},
    {"_VND_mydnorm7", (DL_FUNC) &_VND_mydnorm7, 4},
    {"_VND_simulate_MC", (DL_FUNC) &_VND_simulate_MC, 3},
    {"_VND_uc_model", (DL_FUNC) &_VND_uc_model, 2},
    {"_VND_vnd_model", (DL_FUNC) &_VND_vnd_model, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_VND(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
